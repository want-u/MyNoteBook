public class BitOperator {
	public static void main(String[] args) {
		/*
		位运算：2&3
		1. 先得到2的补码
		  2的原码 00000000 00000000 00000000 00000010
		  2的补码 00000000 00000000 00000000 00000010
		2. 再得到3的补码
		  3的原码 00000000 00000000 00000000 00000011
		  3的补码 00000000 00000000 00000000 00000011
		3. 2&3
		  00000000 00000000 00000000 00000010
		  00000000 00000000 00000000 00000011
		=>00000000 00000000 00000000 00000010
		=>2
		    
		*/
		System.out.println(2&3); // 2
		/*
		位运算：~-2
		1. 先得到-2的补码
		  -2的原码 10000000 00000000 00000000 00000010
		  -2的反码 11111111 11111111 11111111 11111101
		  -2的补码 11111111 11111111 11111111 11111110
		2. ~-2
		  11111111 11111111 11111111 11111110
		=>00000000 00000000 00000000 00000001
		=>1
		*/
		System.out.println(~-2); // 1

		/*
		位运算：~2
		1. 先得到2的补码
		  -2的原码 00000000 00000000 00000000 00000010
		  -2的补码 00000000 00000000 00000000 00000010
		2. ~2
		  00000000 00000000 00000000 00000010
		=>11111111 11111111 11111111 11111101 [补码]
		=>11111111 11111111 11111111 11111100 [反码]
		=>10000000 00000000 00000000 00000011 [原码]
		=>-3
		*/
		System.out.println(~2); // -3

		/*
		位运算：2|3
		1. 2的补码
		  00000000 00000000 00000000 00000010
		2. 3的补码
		  00000000 00000000 00000000 00000011
		3. 2|3
		  00000000 00000000 00000000 00000010
		  00000000 00000000 00000000 00000011
		=>00000000 00000000 00000000 00000011
		=>3
		*/
		System.out.println(2|3); // 3

		/*
		位运算：2^3
		1. 2的补码
		  00000000 00000000 00000000 00000010
		2. 3的补码
		  00000000 00000000 00000000 00000011
		3. 2^3
		  00000000 00000000 00000000 00000010
		  00000000 00000000 00000000 00000011
		=>00000000 00000000 00000000 00000001
		=>1
		*/
		System.out.println(2^3); // 1
	}
}